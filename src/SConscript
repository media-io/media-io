
import os
Import('env')
Import('conf')

commonLib = env.SharedLibrary(
	'mediaio-common',
	Glob('mediaio/common/*.cpp'),
	LIBS = [
		'dl'
	],
)

apiLib = env.SharedLibrary(
	'mediaio-api',
	Glob('mediaio/api/*/*.c'),
	LIBS = [
		commonLib,
	],
)

hostLib = env.SharedLibrary(
	'mediaio-host',
	Glob('mediaio/host/*.cpp'),
	LIBS = [
		commonLib,
		apiLib,
	],
)

hostCLib = env.SharedLibrary(
	'mediaio-host-c',
	Glob('mediaio/host_c/*.cpp'),
	LIBS = [
		commonLib,
		apiLib,
		hostLib,
	],
)

readerLib = env.SharedLibrary(
	'mediaio-reader',
	Glob('mediaio/reader/*.cpp'),
	LIBS = [
		commonLib,
		apiLib,
		hostLib,
	],
)

env.Alias('install', env.InstallVersionedLib('$PREFIX/usr/lib', commonLib))
env.Alias('install', env.InstallVersionedLib('$PREFIX/usr/lib', apiLib))
env.Alias('install', env.InstallVersionedLib('$PREFIX/usr/lib', hostLib))
env.Alias('install', env.InstallVersionedLib('$PREFIX/usr/lib', hostCLib))
env.Alias('install', env.InstallVersionedLib('$PREFIX/usr/lib', readerLib))

h_paths = [
	'mediaio/api/common',
	'mediaio/api/data',
	'mediaio/api/descriptor',
	'mediaio/api/instance',
	'mediaio/api/metadata',
	'mediaio/api/reader',
	'mediaio/api/writer',
	'mediaio/api/unwrapper',
	'mediaio/api/wrapper',
	'mediaio/api/decoder',
	'mediaio/api/encoder',
	'mediaio/api/generator',
	'mediaio/api/filter',
	'mediaio/api/analyser',
	'mediaio/host_c',
]

hpp_paths = [
	'mediaio/common',
	'mediaio/host',
	'mediaio/reader',
]

for path in h_paths:
	env.Alias('install', env.Install(os.path.join('$PREFIX/usr/include', path), Glob(os.path.join(path, "*.h"))))

for path in hpp_paths:
	env.Alias('install', env.Install(os.path.join('$PREFIX/usr/include', path), Glob(os.path.join(path, "*.hpp"))))

Export('commonLib')
Export('apiLib')
Export('hostLib')
Export('hostCLib')
Export('readerLib')
